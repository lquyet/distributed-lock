syntax = "proto3";
package proto;
option go_package = "github.com/lquyet/distributed-lock/proto";

message LogEntry {
  int32 term = 1;
  string command = 2;
}

message AppendEntriesRequest {
  int32 term = 1; // the leader's term
  int32 leaderId = 2; // the leader's id, so followers can tell the client who the leader is, OR, redirect request to leader
  int32 prevLogIndex = 3; // index of log entry immediately preceding new ones
  int32 prevLogTerm = 4; // term of prevLogIndex entry
  repeated LogEntry entries = 5; // log entries to store (empty for heartbeat, may send more than one for efficiency)
  int32 leaderCommit = 6; // leader's commitIndex
}

message AppendEntriesResponse {
  int32 term = 1; // current term, for leader to update itself
  bool success = 2; // true if follower contained entry matching prevLogIndex and prevLogTerm
}

message RequestVoteRequest {
  int32 term = 1; // candidate's term
  int32 candidateId = 2; // candidate requesting vote
  int32 lastLogIndex = 3; // index of candidate's last log entry
  int32 lastLogTerm = 4; // term of candidate's last log entry
}

message RequestVoteResponse {
  int32 term = 1; // current term, for candidate to update itself
  bool voteGranted = 2; // true means candidate received vote
}

message JoinClusterRequest {
  int32 id = 1;
  string addr = 2;
}

message JoinClusterResponse {
  int32 id = 1;
  repeated int32 ids = 2;
  repeated string addrs = 3;
}

message SubmitRequest {
  string command = 1;
}

message SubmitResponse {
  bool success = 1;
}