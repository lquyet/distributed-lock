// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: models.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on AcquireLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcquireLockRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AcquireLockRequestValidationError is the validation error returned by
// AcquireLockRequest.Validate if the designated constraints aren't met.
type AcquireLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcquireLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcquireLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcquireLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcquireLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcquireLockRequestValidationError) ErrorName() string {
	return "AcquireLockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcquireLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcquireLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcquireLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcquireLockRequestValidationError{}

// Validate checks the field values on AcquireLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcquireLockResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AcquireLockResponseValidationError is the validation error returned by
// AcquireLockResponse.Validate if the designated constraints aren't met.
type AcquireLockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcquireLockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcquireLockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcquireLockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcquireLockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcquireLockResponseValidationError) ErrorName() string {
	return "AcquireLockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcquireLockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcquireLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcquireLockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcquireLockResponseValidationError{}

// Validate checks the field values on ReleaseLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReleaseLockRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ReleaseLockRequestValidationError is the validation error returned by
// ReleaseLockRequest.Validate if the designated constraints aren't met.
type ReleaseLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseLockRequestValidationError) ErrorName() string {
	return "ReleaseLockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseLockRequestValidationError{}

// Validate checks the field values on ReleaseLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReleaseLockResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ReleaseLockResponseValidationError is the validation error returned by
// ReleaseLockResponse.Validate if the designated constraints aren't met.
type ReleaseLockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseLockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseLockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseLockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseLockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseLockResponseValidationError) ErrorName() string {
	return "ReleaseLockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseLockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseLockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseLockResponseValidationError{}
